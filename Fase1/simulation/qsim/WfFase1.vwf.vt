// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2019 10:19:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Fase1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Fase1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [1:0] KEY;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [8:8] LEDG;

// assign statements (if any)                          
Fase1 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.KEY(KEY),
	.LEDG(LEDG)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
initial
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #30000 1'b1;
	CLOCK_50 = #70000 1'b0;
	CLOCK_50 = #300000 1'b1;
	CLOCK_50 = #200000 1'b0;
	CLOCK_50 = #50000 1'b1;
	CLOCK_50 = #100000 1'b0;
	CLOCK_50 = #100000 1'b1;
end 
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b0;
	KEY[1] = #60000 1'b1;
	KEY[1] = #150000 1'b0;
	KEY[1] = #50000 1'b1;
	KEY[1] = #150000 1'b0;
	KEY[1] = #250000 1'b1;
	KEY[1] = #50000 1'b0;
	KEY[1] = #50000 1'b1;
	KEY[1] = #50000 1'b0;
	KEY[1] = #100000 1'b1;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b0;
	KEY[0] = #10000 1'b1;
	KEY[0] = #50000 1'b0;
	KEY[0] = #50000 1'b1;
	KEY[0] = #250000 1'b0;
	KEY[0] = #50000 1'b1;
	KEY[0] = #50000 1'b0;
	KEY[0] = #50000 1'b1;
	KEY[0] = #50000 1'b0;
	KEY[0] = #50000 1'b1;
	KEY[0] = #50000 1'b0;
	KEY[0] = #100000 1'b1;
	KEY[0] = #150000 1'b0;
	KEY[0] = #50000 1'b1;
end 
endmodule

